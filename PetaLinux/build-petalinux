# Before running this script, you must source the PetaLinux and Vivado settings:
# source <petalinux-install-dir>/settings.sh
# source <vivado-install-dir>/settings64.sh

# Get a list of all the exported projects

filelist=(`find ../Vivado/ -name "*.xsa"`)

# Iterate through all of those files

for f in ${filelist[*]}
do
  # Get the project name
  proj=$(echo $f | tr "/" "\n" | sed -n '3p')
  echo "INFO: Exported Vivado project found: $proj"
  echo "> Exported hardware spec [$f]"

  # No PetaLinux for ZC702 dual design (FIFO based design)
  if [[ $proj == "zc702_lpc2_lpc1_axieth" ]]; then
    continue
  fi

  # Name of the BIT file
  runs=$(echo $f | sed -e "s/_wrapper.xsa/.runs/g")
  bit="$runs/impl_1/${proj}_wrapper.bit"
  if [ -f "$bit" ]; then
    echo "> BIT file exists [$bit]"
  else
    echo "> BIT file does not exist [$bit]"
    echo "> PetaLinux will not be built for this project"
    echo
    continue
  fi

  # Get the port configuration
  vivadoprj="../Vivado/$proj/$proj.xpr"
  portconfig=$(grep -Po -m 1 '(?<=src/constraints/rgmii-)[^.]+' $vivadoprj)
  portconfig="ports-$portconfig"

  # Get CPU type from Vivado project file
  if grep -q Part=\"xczu "$vivadoprj"; then
    cpu_type="zynqMP"
    fsbl_option="--fsbl ./images/linux/zynqmp_fsbl.elf"
  elif grep -q Part=\"xc7z "$vivadoprj"; then
    cpu_type="zynq"
    fsbl_option="--fsbl ./images/linux/zynq_fsbl.elf"
  else
    cpu_type="microblaze"
    fsbl_option="--fsbl ./images/linux/fs-boot.elf"
  fi

  echo "> CPU_TYPE: $cpu_type"

  # Create PetaLinux project if it does not exists
  if [ -d "./$proj" ]; then
    echo "> PetaLinux project already exists"
  else
    echo "> Creating PetaLinux project"
    petalinux-create --type project --template $cpu_type --name $proj
  fi

  cd $proj

  # Configure PetaLinux project with hardware description if 'components' dir doesn't exist
  if [ -d "./components" ]; then
    echo "> PetaLinux project already configured with hardware description"
  else
    echo "> Configuring PetaLinux project with hardware description"
    petalinux-config --get-hw-description ../$(dirname "${f}") --silentconfig
  fi

  # Get the board name
  board=${proj%%_*}
  
  # Copy PetaLinux config files
  if [[ -f "configdone.txt" ]]; then
    echo "> PetaLinux config files already transferred"
  else
    echo "> Transferring PetaLinux BSPs and config files"
    if [[ $portconfig != "ports-" ]]; then
      cp -R ../src/$portconfig/* .
    fi
    if [ -d "../src/$board" ]; then
      cp -R ../src/$board/* .
    fi
    # File to indicate that config files have been transferred
    touch configdone.txt
    # Run petalinux-config again to register the config files
    petalinux-config --silentconfig
  fi

  # Build PetaLinux project if not built already
  if [ -d "./images" ]; then
    echo "> PetaLinux project already built"
  else
    echo "> Building PetaLinux project"
    petalinux-build
  fi

  # Package PetaLinux project if not packaged
  if [ $board == "kcu105" ] || [ $board == "ac701" ]; then
    if [ -f "./images/linux/boot.mcs" ]; then
      echo "> PetaLinux project already packaged"
    else
      echo "> Packaging PetaLinux project"
      petalinux-package --boot --force --fpga ./images/linux/system.bit --u-boot --kernel --flash-size 32 --flash-intf SPIx4
    fi
  elif [[ $cpu_type == microblaze ]]; then
    if [ -f "./images/linux/boot.mcs" ]; then
      echo "> PetaLinux project already packaged"
    else
      echo "> Packaging PetaLinux project"
      petalinux-package --boot --force --fpga ./images/linux/system.bit --u-boot --kernel --flash-size 128 --flash-intf BPIx16
    fi
  else
    if [[ -f "./images/linux/BOOT.BIN" && -f "./images/linux/image.ub" ]]; then
      echo "> PetaLinux project already packaged"
    else
      echo "> Packaging PetaLinux project"
      if [ $cpu_type == "zynqMP" ]; then
        petalinux-package --boot $fsbl_option --pmufw ./images/linux/pmufw.elf --fpga ../$bit --atf ./images/linux/bl31.elf --u-boot
      else
        petalinux-package --boot $fsbl_option --fpga ../$bit --u-boot
      fi
    fi
  fi
  cd ..
done

echo "PetaLinux build script completed"

