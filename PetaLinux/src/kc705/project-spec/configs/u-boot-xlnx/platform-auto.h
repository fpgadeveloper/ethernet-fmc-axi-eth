/*
 * This file is auto-generated by PetaLinux SDK 
 * DO NOT MODIFY this file, the modification will not persist
 */

#ifndef __PLNX_CONFIG_H
#define __PLNX_CONFIG_H

/* The following table includes the supported baudrates */


#define CONFIG_SYS_BAUDRATE_TABLE  { 300, 600, 1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200, 230400 }



/* processor - microblaze_0 */
#define XILINX_USE_MSR_INSTR	1
#define XILINX_USE_ICACHE	1
#define XILINX_USE_DCACHE	1
#define XILINX_DCACHE_BYTE_SIZE	32768
#define XILINX_PVR	2
#define MICROBLAZE_V5
#define CONFIG_CMD_IRQ
#define CONFIG_DCACHE
#define CONFIG_ICACHE

/* main_memory - mig_7series_0 */

/* uartlite - axi_uartlite_0 */
#define XILINX_UARTLITE_BASEADDR	0x40600000
#define CONFIG_BAUDRATE	115200
#define TTYUL0	"ttyUL0=setenv stdout ttyUL0;setenv stdin ttyUL0\0"
#define SERIAL_MULTI	"serial=setenv stdout serial;setenv stdin serial\0" "stdin=ttyUL0\0" "stdout=ttyUL0\0"
#define CONSOLE_ARG "console=console=ttyUL0,115200\0"
#define SERIAL_MULTI	"serial=setenv stdout serial;setenv stdin serial\0" "stdin=ttyUL0\0" "stdout=ttyUL0\0"
#define CONSOLE_ARG "console=console=ttyUL0,115200\0"

/* ethernet - axi_ethernet_0 */
#define CONFIG_MII
#define CONFIG_NET_MULTI
#define CONFIG_NETCONSOLE	1
#define CONFIG_SERVERIP	172.25.128.3
#define CONFIG_IPADDR

/* nor_flash - axi_emc_0 */
#define CONFIG_SYS_FLASH_BASE	0x60000000
#define CONFIG_SYS_MAX_FLASH_SECT	2048
#define CONFIG_SYS_FLASH_EMPTY_INFO
#define CONFIG_SYS_MAX_FLASH_BANKS	1

/* timer - axi_timer_0 */

/* intc - microblaze_0_axi_intc */

/* FPGA */

/* Memory testing handling */
#define CONFIG_SYS_MEMTEST_START	0x80000000
#define CONFIG_SYS_MEMTEST_END	(0x80000000 + 0x1000)
#define CONFIG_SYS_LOAD_ADDR	0x80000000 /* default load address */

/* global pointer options */
#define CONFIG_SYS_GBL_DATA_OFFSET	(0x40000000 - GENERATED_GBL_DATA_SIZE)

/* Size of malloc() pool */
#define SIZE	0x100000
#define CONFIG_SYS_MALLOC_LEN	SIZE
#define CONFIG_SYS_MONITOR_LEN	SIZE
#define CONFIG_SYS_MONITOR_BASE	(0x80000000 + CONFIG_SYS_GBL_DATA_OFFSET - CONFIG_SYS_MONITOR_LEN - GENERATED_BD_INFO_SIZE)
#define CONFIG_SYS_MALLOC_BASE	(CONFIG_SYS_MONITOR_BASE - CONFIG_SYS_MALLOC_LEN)

/* stack */
#define CONFIG_SYS_INIT_SP_OFFSET	(CONFIG_SYS_TEXT_BASE - CONFIG_SYS_MALLOC_F_LEN)

/* No of_control support yet*/


/* BOOTP options */
#define CONFIG_BOOTP_SERVERIP
#define CONFIG_BOOTP_BOOTFILESIZE
#define CONFIG_BOOTP_BOOTPATH
#define CONFIG_BOOTP_GATEWAY
#define CONFIG_BOOTP_HOSTNAME
#define CONFIG_BOOTP_MAY_FAIL
#define CONFIG_BOOTP_DNS
#define CONFIG_BOOTP_SUBNETMASK
#define CONFIG_BOOTP_PXE

/*Command line configuration.*/
#define CONFIG_CMDLINE_EDITING
#define CONFIG_AUTO_COMPLETE

#define CONFIG_SUPPORT_RAW_INITRD

/* Miscellaneous configurable options */
#define CONFIG_SYS_CBSIZE	2048/* Console I/O Buffer Size      */
#define CONFIG_SYS_PBSIZE	(CONFIG_SYS_CBSIZE + sizeof(CONFIG_SYS_PROMPT) + 16)
#define CONFIG_SYS_BARGSIZE CONFIG_SYS_CBSIZE

/* Use the HUSH parser */
#define CONFIG_SYS_PROMPT_HUSH_PS2 "> "

#define CONFIG_ENV_VARS_UBOOT_CONFIG
#define CONFIG_ENV_OVERWRITE	/* Allow to overwrite the u-boot environment variables */

#define CONFIG_LMB

/* FDT support */
#define CONFIG_DISPLAY_BOARDINFO_LATE


/* architecture dependent code */
#define CONFIG_SYS_USR_EXCEP    /* user exception */
#define CONFIG_SYS_HZ   1000

/* Boot Argument Buffer Size */
#define CONFIG_SYS_MAXARGS     32      /* max number of command args */
#define CONFIG_SYS_LONGHELP


/* Initial memory map for Linux */
#define CONFIG_SYS_BOOTMAPSZ 0x8000000

/* Environment settings*/
#define CONFIG_ENV_ADDR	0x60c80000
#define CONFIG_ENV_SIZE	0x20000
#define CONFIG_ENV_SECT_SIZE	0x20000

/* PREBOOT */
#define CONFIG_PREBOOT	"echo U-BOOT for xilinx-kc705-2020_2;setenv preboot; echo; dhcp"

/* Extra U-Boot Env settings */
#define CONFIG_EXTRA_ENV_SETTINGS \
	SERIAL_MULTI \ 
	CONSOLE_ARG \ 
	TTYUL0 \ 
	"nc=setenv stdout nc;setenv stdin nc;\0" \ 
	"ethaddr=00:0a:35:00:22:01\0" \
	"autoload=no\0" \ 
	"sdbootdev=0\0" \ 
	"clobstart=0x80000000\0" \ 
	"netstart=0x80000000\0" \ 
	"dtbnetstart=0x81e00000\0" \ 
	"netstartaddr=0x81000000\0"  "bootcmd=bootm 0x80000000 0x82e00000 0x81e00000\0"  "loadaddr=0x80000000\0" \ 
	"initrd_high=0x0\0" \ 
	"bootsize=0x180000\0" \ 
	"bootstart=0x60b00000\0" \ 
	"boot_img=u-boot-s.bin\0" \ 
	"load_boot=tftpboot ${clobstart} ${boot_img}\0" \ 
	"update_boot=setenv img boot; setenv psize ${bootsize}; setenv installcmd \"install_boot\"; run load_boot test_img; setenv img; setenv psize; setenv installcmd\0" \ 
	"install_boot=protect off ${bootstart} +${bootsize} && erase ${bootstart} +${bootsize} && "  "cp.b ${clobstart} ${bootstart} ${filesize}\0" \ 
	"bootenvsize=0x20000\0" \ 
	"bootenvstart=0x60c80000\0" \ 
	"eraseenv=protect off ${bootenvstart} +${bootenvsize} && erase ${bootenvstart} +${bootenvsize}\0" \ 
	"kernelsize=0xc00000\0" \ 
	"kernelstart=0x60ca0000\0" \ 
	"kernel_img=image.ub\0" \ 
	"load_kernel=tftpboot ${clobstart} ${kernel_img}\0" \ 
	"update_kernel=setenv img kernel; setenv psize ${kernelsize}; setenv installcmd \"install_kernel\"; run load_kernel test_crc; setenv img; setenv psize; setenv installcmd\0" \ 
	"install_kernel=protect off ${kernelstart} +${kernelsize} && erase ${kernelstart} +${kernelsize} && "  "cp.b ${clobstart} ${kernelstart} ${filesize}\0" \ 
	"cp_kernel2ram=cp.b ${kernelstart} ${netstart} ${kernelsize}\0" \ 
	"fpgasize=0xb00000\0" \ 
	"fpgastart=0x60000000\0" \ 
	"fpga_img=system.bit.bin\0" \ 
	"load_fpga=tftpboot ${clobstart} ${fpga_img}\0" \ 
	"update_fpga=setenv img fpga; setenv psize ${fpgasize}; setenv installcmd \"install_fpga\"; run load_fpga test_img; setenv img; setenv psize; setenv installcmd\0" \ 
	"install_fpga=protect off ${fpgastart} +${fpgasize} && erase ${fpgastart} +${fpgasize} && "  "cp.b ${clobstart} ${fpgastart} ${filesize}\0" \ 
	"fault=echo ${img} image size is greater than allocated place - partition ${img} is NOT UPDATED\0" \ 
	"test_crc=if imi ${clobstart}; then run test_img; else echo ${img} Bad CRC - ${img} is NOT UPDATED; fi\0" \ 
	"test_img=setenv var \"if test ${filesize} -gt ${psize}\\; then run fault\\; else run ${installcmd}\\; fi\"; run var; setenv var\0" \ 
	"netboot=tftpboot ${netstartaddr} ${kernel_img} && bootm\0" \ 
	"default_bootcmd=bootcmd\0" \ 
""

/* BOOTCOMMAND */
#define CONFIG_BOOTCOMMAND	"run default_bootcmd"

#endif /* __PLNX_CONFIG_H */
